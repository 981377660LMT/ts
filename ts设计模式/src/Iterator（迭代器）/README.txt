*迭代器模式：
・定义：提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。
・解释：
  -- 聚合对象拥有两个职责：一是存储数据；二是遍历数据。从依赖性来看，前者是聚合对象的基本职责；而后者既是可变化的，又是可分离的。因此，可以将遍历数据的行为从聚合对象中分离出来，封装在一个被称之为“迭代器”的对象中，由迭代器来提供遍历聚合对象内部数据的行为，这将简化聚合对象的设计，更符合“单一职责原则”的要求。
  -- 迭代器模式：提供一种方法来访问聚合对象，而不用暴露这个对象的内部表示。即让用户通过特定的接口访问容器的数据，不需要了解容器内部的数据结构。
・场景：
  -- Java中的Collection、List、Set、Map都包含了迭代器。
  -- JS中的Array、Map、Set、String、TypedArray、函数的arguments对象、NodeList对象都包含了迭代器。
  -- 由于集合与迭代器的关系太密切了，所以大多数语言在实现集合的时候都给提供了迭代器，并且这些语言提供的集合和迭代器在绝大多数情况下就可以满足我们的需要，所以现在需要我们自己去实践迭代器模式的场景还是比较少见的，我们只需要使用语言中已有的集合和迭代器就可以了。
・优点：
  -- 访问一个聚合对象的内容而无须暴露它的内部表示。
  -- 遍历任务交由迭代器完成，这简化了聚合类。
  -- 它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。
  -- 增加新的聚合类和迭代器类都很方便，无须修改原有代码。
  -- 封装性良好，为遍历不同的聚合结构提供一个统一的接口。
・缺点：
  -- 增加了类的个数，这在一定程度上增加了系统的复杂性。