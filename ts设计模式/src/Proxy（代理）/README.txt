*代理模式：
·定义：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。
·解释：当无法直接访问某个对象或访问某个对象存在困难时或访问前需要一定的初始化，这时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，所访问的真实对象与代理对象需要实现相同的接口。根据代理模式的使用目的不同，代理模式又可以分为多种类型，例如保护代理、远程代理、虚拟代理、智能代理、缓冲代理、防火墙代理、写时复制代理等，它们应用于不同的场合，满足用户的不同需求。
代理和被代理对象在代理之前是确定的。他们都实现相同的接口或者继承相同的抽象类。设计代理以前真实主题必须事先存在，真实主题与代理主题一一对应，增加真实主题也要增加代理。
·场景：
  -- 智能引用代理：是最常见的代理方式，对目标对象提供了额外服务或减少原有服务，例如火车票代售，除了售票还可能提供将您送达到车站的额外服务；例如：前端请求数据接口时，接口限制了Referer访问。这时前端可以访问自己的后端，后端帮忙伪造Referer进行接口请求；例如vue中数据绑定实现的原理是借助Object.defineProperty代理；例如日志处理、事物处理等；例如代购、房产中介、打官司时找律师等。
  -- 远程代理：为不同地理的对象提供局域网代表对象。例如远程监听各家连锁店的数据运营情况
  -- 虚拟代理：把开销很大的对象，延迟到真正需要它的时候再去创建，例如：前端常用的图片懒加载功能，在加载图片资源完成之前，先用一张本地图片代替占位
  -- 保护代理：控制用户的访问权限，例如：相亲时，媒婆会帮女方过滤掉那么没车没房的相亲者
  -- 缓存代理：缓存代理可以为一些开销大的运算结果提供暂时存储，在下次运算时，如果传递进来的参数跟之前一样，则可以直接返回前面存储的运算结果
  -- 某软件公司承接了某信息咨询公司的收费商务信息查询系统的开发任务，该系统的基本需求如下：①在进行商务信息查询之前用户需要通过身份验证，只有合法用户才能够使用该查询系统；②在进行商务信息查询时系统需要记录查询日志，以便根据查询次数收取查询费用。该软件公司开发人员已完成了商务信息查询模块的开发任务，现希望能够以一种松耦合的方式向原有系统增加身份验证和日志记录功能，客户端代码可以无区别地对待原始的商务信息查询模块和增加新功能之后的商务信息查询模块，而且可能在将来还要在该信息查询模块中增加一些新的功能。可以使用代理模式设计并实现该收费商务信息查询系统。
·优点：
  -- 代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；
  -- 代理对象可以扩展目标对象的功能；
  -- 代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；
·缺点：
  -- 在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；
  -- 增加了系统的复杂度
·补充：
  -- Proxy：ES6新增了Proxy对象，在语法层面实现代理模式。Proxy(target, handler) 是一个构造函数，target是被代理的对象，handlder是声明了各类代理操作的对象，最终返回一个代理对象。外界每次通过代理对象访问 target对象的属性时，就会经过handler 对象，从这个流程来看，代理对象很类似middleware（中间件）。那么Proxy可以拦截什么操作呢？最常见的就是get（读取）、set（修改）对象属性等操作，完整的可拦截操作列表请点击这里。此外，Proxy对象还提供了一个revoke方法，可以随时注销所有的代理操作。
  -- 代理模式与装饰器模式的区别：代理模式是在对象之外增加功能，装饰器模式是在对象上增加功能

