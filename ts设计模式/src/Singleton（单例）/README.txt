*单例模式
・定义：指一个类只有一个实例。
・解释：在某些情况下，为了提高性能、保证数据内容的一致性，对某些类要求只能创建一个实例，这就是所谓的单例模式。
・场景：
  -- 在每一届任期内，美国的总统只有一人，且是同一人
  -- 王者荣耀中，购买装备的窗口我们经常要用到，这个窗口可以用单例模式，避免多次使用时频繁的创建过程。
  -- 微信小程序中的toast，无论你创建多少次，它永远都是同一个
  -- Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。
・优点：
  -- 由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。
  -- 由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式解决。
  -- 单例模式可以在系统设置全局的访问点，优化和共享资源的访问。
  -- 避免对资源的多重占用，避免对同一个资源文件的同时操作，造成文件状体不一致。
・缺点：
  -- 单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。
・补充：
  在java中，Singleton模式通常有两种实现形式：懒汉式单例和饿汉式单例，他们之间的区别是前者有关键字 volatile和synchronized，后者的类一旦加载就自动创建一个单例，这样可以多线程编程时保证线程安全。
  ts是单线程，但在使用时还是有注意点：例如class A为单例模式，依赖class B,B又通过A.getInstance().AMethod()依赖了A的方法，这时A并未完成初始化，仍然是null，这样导致B中A.getInstance()循环创建A，内存溢出。解决方案就是将B的创建改为异步或者避免双向依赖。