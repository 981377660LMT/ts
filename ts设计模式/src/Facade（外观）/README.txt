*外观模式：
·定义：是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。
·解释：外观模式是一种使用频率非常高的结构型设计模式，它通过引入一个外观角色来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与客户端的耦合度，且客户端调用非常方便。外观模式并不给系统增加任何新功能，它仅仅是简化调用接口。
·场景实例：
  -- 使用egret开发游戏时，由于每款游戏通常需要发布到多个平台上，所以提取出一个统一的接口platform.ts用于开发者获取平台数据信息，http://developer.egret.com/cn/github/egret-docs/Engine2D/minigame/api/index.html
  -- 笔记本电脑启动实际包括显示器启动、cpu启动、内存启动、硬盘启动等，而我们只需按下电源键就可以启动这些，无需关心它内部如何运作。
  -- 某软件公司欲开发一个可应用于多个软件的文件加密模块，该模块可以对文件中的数据进行加密并将加密之后的数据存储在一个新文件中，具体的流程包括三个部分，分别是读取源文件、加密、保存加密之后的文件，其中，读取文件和保存文件使用流来实现，加密操作通过求模运算实现。这三个操作相对独立，为了实现代码的独立重用，让设计更符合单一职责原则，这三个操作的业务代码封装在三个不同的类中。可使用外观模式设计该文件加密模块。
  -- 浏览器导航页，它能很方便快速跳转常用网页
·优点：
  -- 降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。
  -- 对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。
  -- 降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。
·缺点：
  -- 不能很好地限制客户使用子系统类。
  -- 增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。
