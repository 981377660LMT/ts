*状态模式：
・定义：对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。
・解释：有一个对象，它是有状态的；这个对象在状态不同的时候，行为不一样；这些状态是可以切换的，而非毫无关系。状态模式主要解决的是当控制一个对象状态的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化，这样所带来的好处就是可以大大的增加程序的可维护性与扩展性。
・优点：
  -- 封装了状态的转换规则，在状态模式中可以将状态的转换代码封装在环境类或者具体状态类中，可以对状态转换代码进行集中管理，而不是分散在一个个业务方法中。
  -- 将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同的行为。
  -- 允许状态转换逻辑与状态对象合成一体，而不是提供一个巨大的条件语句块，状态模式可以让我们避免使用庞大的条件语句来将业务方法和状态转换代码交织在一起。
・实例：https://www.jianshu.com/p/67ad1915fd62
・使用场景：
  -- 软件公司某开发人员欲开发一个屏幕放大镜工具，其具体功能描述如下：用户单击“放大镜”按钮之后屏幕将放大一倍，再点击一次“放大镜”按钮屏幕再放大一倍，第三次点击该按钮后屏幕将还原到默认大小。
  -- 软件公司欲开发一款纸牌游戏软件，在该游戏软件中用户角色具有入门级(Primary)、熟练级(Secondary)、高手级(Professional)和骨灰级(Final)四种等级，角色的等级与其积分相对应，游戏胜利将增加积分，失败则扣除积分。入门级具有最基本的游戏功能play() ，熟练级增加了游戏胜利积分加倍功能doubleScore()，高手级在熟练级基础上再增加换牌功能changeCards()，骨灰级在高手级基础上再增加偷看他人的牌功能peekCards()。可使用状态模式来设计该系统。
  -- 电梯自定义有4种状态：开、关、走、停止，每个状态执行不同的方法能够改变状态，并且不同的状态只能能执行特定的方法。后续需补充各类异常状态。
・优点：
  -- 状态模式将与特定状态相关的行为局部化到一个状态中，并且将不同状态的行为分割开来，满足“单一职责原则”。
  -- 减少对象间的相互依赖。将不同的状态引入独立的对象中会使得状态转换变得更加明确，且减少对象间的相互依赖。
  -- 有利于程序的扩展。通过定义新的子类很容易地增加新的状态和转换。
・缺点：
  -- 状态模式的使用必然会增加系统的类与对象的个数。
  -- 状态模式的结构与实现都较为复杂，如果使用不当会导致程序结构和代码的混乱。