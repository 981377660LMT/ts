*策略模式
・定义：该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。
・解释：如果使用多重条件转移语句实现，不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。
・实例：
  -- 旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略，当然后续想增加坐飞机的方式，策略模式也能很好的支持。
  -- 某软件公司为某电影院开发了一套影院售票系统，在该系统中需要为不同类型的用户提供不同的电影票打折方式，具体打折方案如下：①学生凭学生证可享受票价8折优惠；②年龄在10周岁及以下的儿童可享受每张票减免10元的优惠（原始票价需大于等于20元）；③影院VIP用户除享受票价半价优惠外还可进行积分，积分累计到一定额度可换取电影院赠送的奖品。该系统在将来可能还要根据需要引入新的打折方式。
  -- 白鹭EUI布局中，有基本、水平、垂直、网格共4种自带布局方式，此时想拓展自定义布局方式，只需将自定义好的布局注入即可使用。
・优点：
  -- 多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句。
  -- 策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。
  -- 策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。
  -- 策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。
  -- 策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。
・缺点：
  -- 客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。
  -- 策略模式造成很多的策略类。
・补充：
  js将函数作为一等对象，可以到处传递。与命令模式一样，js早已将策略模式融入语言中。